<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RESTBadRequest" xml:space="preserve">
    <value>Executed command {0}, but the server replied that the request was bad (HTTP 400).</value>
  </data>
  <data name="RESTExecuteException" xml:space="preserve">
    <value>An error occured while executing the API Command {0}.  </value>
  </data>
  <data name="RESTForbidden" xml:space="preserve">
    <value>Executed command {0}, but the server replied that the action is forbidden (HTTP 403).</value>
  </data>
  <data name="RESTInternalServerError" xml:space="preserve">
    <value>Executed command {0}, but the server had an internal error preventing execution (HTTP 500).</value>
  </data>
  <data name="RESTInvalidURL" xml:space="preserve">
    <value>The path {0} does not exist on the server.  Executed Command {1} (HTTP 404).</value>
  </data>
  <data name="RESTRequestTimeout" xml:space="preserve">
    <value>Attempted to execute command {0}, but the server replied that our request timed out (HTTP 408).</value>
  </data>
  <data name="RESTServiceUnavailable" xml:space="preserve">
    <value>Attempted to execute command {0}, but the server responded that the service was unavailable (HTTP 503).</value>
  </data>
  <data name="RESTUnauthorized" xml:space="preserve">
    <value>Executed command {0}, but the server replied that the request is unauthorized (HTTP 401).  Is your API Key/Secret correctly specified and active?</value>
  </data>
  <data name="RESTUnhandledStatus" xml:space="preserve">
    <value>An HTTP status of {0} was returned, but is unhandled by the API.</value>
  </data>
  <data name="RESTURITooLong" xml:space="preserve">
    <value>Attempted to execute command {0}, but the server replied that the URI was too long (HTTP 414).</value>
  </data>
  <data name="UnsupportedCurrencyPair" xml:space="preserve">
    <value>The currency pair {0}/{1} is not currently supported by the exchange {2}</value>
  </data>
  <data name="RESTCheckInnerException" xml:space="preserve">
    <value>Check the Inner Exception for more details.</value>
  </data>
  <data name="RESTMethodNotAllowed" xml:space="preserve">
    <value>Attempted to execute command {0} but the server responded that the method was not allowed (HTTP 405).  The method used was {1}.</value>
  </data>
  <data name="RESTSuccessButHasException" xml:space="preserve">
    <value>Server returned status OK (HTTP 200) when executing command {0}, but an exception was raised on the response. </value>
  </data>
  <data name="RESTErrorResponseContent" xml:space="preserve">
    <value>The response content contained the following: {0}.</value>
  </data>
</root>